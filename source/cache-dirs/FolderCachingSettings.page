Menu="Utilities"
Title="Folder Caching"
Icon="dynamix.cache.dirs.png"
---
<?PHP
/* Copyright 2012-2018, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.cache.dirs';
$cfg = parse_plugin_cfg($plugin,false,INI_SCANNER_RAW);

$sName = "cache_dirs";
$fName = "$docroot/plugins/$plugin/scripts/$sName";
$config = "/etc/cache_dirs.conf";
$cache = isset($disks['cache']) ? '/mnt/cache' : '';

exec("find /mnt/disk* $cache -type d -maxdepth 1 -mindepth 1 -exec basename {} \;|uniq|sort -u", $folders);
?>
<script>
function prepareCache(form) {
// Simulate a single input field
  var exclude = '';
  for (var i=0,item; item=form.exclude.options[i]; i++) {
    if (item.selected) {
      if (exclude.length) exclude += ',';
      exclude += item.value;
      item.selected = false;
    }
  }
  item = form.exclude.options[0];
  item.value = exclude;
  item.selected = true;
// Simulate a single input field
  var include = '';
  for (var i=0,item; item=form.include.options[i]; i++) {
    if (item.selected) {
      if (include.length) include += ',';
      include += item.value;
      item.selected = false;
    }
  }
  item = form.include.options[0];
  item.value = include;
  item.selected = true;
}
$(function() {
  var size = Math.max(window.innerHeight-$('#pin').offset().top-150,150);
  $('#s1').dropdownchecklist({maxDropHeight:size, width:300, explicitClose:'...close'});
  $('#s2').dropdownchecklist({maxDropHeight:size, width:300, explicitClose:'...close'});
  showStatus('<?=$sName?>');
});
</script>
<form markdown="1" name="cache_settings" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareCache(this)">
<input type="hidden" name="#file" value="<?=$plugin?>/<?=$plugin?>.cfg">
<input type="hidden" name="#include" value="plugins/<?=$plugin?>/include/update.cache.php">
<input type="hidden" name="#config" value="<?=$config?>">
<input type="hidden" name="#prefix" value="minimum=m&maximum=M&exclude=e&include=i&log=l&diskIdleTimer=W&scanTimeoutIdle=X&scanTimeoutBusy=Y&scanTimeoutStable=Z&ulimit=U&cachePressure=p&minDepth=c">
<span class="bitstream" style="float:right;margin-right:12px"><?=exec("$fName -V")?></span>

> Folder Caching Info
>
> The folder caching (cache_dirs) reads directories continously to keep them in memory.
> The program does not know whether a directory is already in memory or need to be reread from disk.
> Therefore it cannot avoid spinning up disks when it happens that the linux memory cache evicts a directory and cache_dirs rescans the directoy.
> If a large number of files are being kept in memory then it seems inevitably that some diretories get evicted from the cache when the system is under load.
>
> The program by default uses an adaptive mode where it reduces the depth of the directory structure which it tries to keep in memory.
> When it detects a cache-miss (slow scan time) it will reduce the depth until disks are idle again,
> but will still be at risk of putting load on the disks for a minute or two until the program gives up and waits for idle disks.
> The less files the cache need to hold, the less likely it is that the program spins up disks.

Folder caching function:
: <select name="service" size="1">
  <?=mk_option($cfg['service'], "0", "Disabled")?>
  <?=mk_option($cfg['service'], "1", "Enabled")?>
  </select></td>

> Select whether folder caching is enabled or disabled. Caching will only effectively occur when the array is started.
> The caching function is automatically restarted or stopped when the array goes online or offline.

Cache pressure of directories on system (Important - check help if disks spin up):
: <input type="text" name="cachePressure" class="narrow" maxlength="4" value="<?=$cfg['cachePressure']?>" placeholder="10">

> set cache_pressure to NN (by default = 10). 0 means never reclaim cache.
>
> 1 works great for many users. If your disks spin up or cache_dirs logging indicates it frequently has accessed disks after scan, try lowering cache-pressure to 1. If the system runs out of memory increase cache-pressure.
>
> Warning: 0 will cause kernel never to release the memory of directories, and if too little memory is available,
> it will cause the system to crash. cache_dirs does not reset the cachePressure after quitting,
> to reset the cache-pressure execute 'sudo sysctl vm.vfs_cache_pressure=100', or run cache-dirs with cache_pressure 100.
> 
> See 'vfs_cache_pressure' in <a href="https://www.kernel.org/doc/Documentation/sysctl/vm.txt">kernel.org</a>.

Suspend during 'Mover' process:
: <select name="suspend" size="1">
  <?=mk_option($cfg['ssupend'], "-S", "No")?>
  <?=mk_option($cfg['suspend'], "", "Yes")?>
  </select>

> Stop caching while the mover is running to avoid conflicts. When using adaptive depth it will probably work well NO.
> With fixed depth it will almost certainly put less load on the disks to choose YES.

Included folders:
: <select id="s2" name="include" size="1" multiple style="display:none">
  <?foreach ($folders as $folder):?>
  <?=mk_option_check($cfg['include'], $folder, $folder)?>
  <?endforeach;?>
  </select>

> The dropdown menu shows all available folders, by default all folders are included. Select here the restricted list of folders to be included.
>
> If an included folder is excluded, then the folder gets excluded. It is simplest to not use includes and excludes at the same time.

Excluded folders:
: <select id="s1" name="exclude" size="1" multiple style="display:none">
  <?foreach ($folders as $folder):?>
  <?=mk_option_check($cfg['exclude'], $folder, $folder)?>
  <?endforeach;?>
  </select>

> The dropdown menu shows all available folders, by default no folders are excluded. Select here any folders to be excluded.
>
> It is possible to exclude an included folder. It is simplest to not use includes and excludes at the same time.

Use Adaptive depth:
: <select name="adaptive" size="1">
  <?=mk_option($cfg['adaptive'], "1", "Adaptive")?>
  <?=mk_option($cfg['adaptive'], "0", "Fixed")?>
  </select>

> If adaptive is enabled the depth will be automatically adjusted but will never exceed max level depth.
> It will start at depth 1 and keep increasing the scan depth towards maximum level as long as scans do not take too long to complete (see scan timeout).
> If adaptive is disabled then cache_dirs will always scan to the max level.

Minimum level depth (for adaptive depth):
: <input type="text" name="minDepth" class="narrow" maxlength="3" value="<?=$cfg['minDepth']?>" placeholder="4">

> Sets the minimum folder level for the adaptive scan (user-share > child folder > grand child is two levels). Default is 4.

Max level depth:
: <input type="text" name="depth" class="narrow" maxlength="3" value="<?=$cfg['depth']?>" placeholder="unlimited">

> Sets the maximum folder levels for the scan (parent > child folder > grand child). Set to 'unlimited' (or 0) to remove maximum

Disk Idle Timer (sec):
: <input type="text" name="diskIdleTimer" class="narrow" maxlength="4" value="<?=$cfg['diskIdleTimer']?>" placeholder="60">

> When the disks have been idle this long, cache_dirs adaptive scan starts working towards building the cache.

Scan timeout for a scan during disk-idle period (sec):
: <input type="text" name="scanTimeoutIdle" class="narrow" maxlength="4" value="<?=$cfg['scanTimeoutIdle']?>" placeholder="150">

> Scan timeout is the maximum duration that a single scan through all directories at the current level af depth (which may change adaptively).
> Increase it if cache_dirs fails in caching all your files. This timeout is always used if adaptive is disabled.

Scan timeout for a scan during initial startup or less-idle period (sec):
: <input type="text" name="scanTimeoutBusy" class="narrow" maxlength="4" value="<?=$cfg['scanTimeoutBusy']?>" placeholder="30">

> Increase it if you want cache_dirs too give more time in initial scan, and when filesystem may be busy.

Scan timeout for a scan when all directories have been succesfully cached (sec):
: <input type="text" name="scanTimeoutStable" class="narrow" maxlength="4" value="<?=$cfg['scanTimeoutStable']?>" placeholder="20">

> Decrease it if you want cache_dirs to put less load on system when cache is evicted from memory, and disks are not idle.
> Increase if you want cache_dirs to have a greater chance af getting directories back into memory.

Minimum interval between folder scans (sec):
: <input type="text" name="minimum" class="narrow" maxlength="3" value="<?=$cfg['minimum']?>" placeholder="1">

> Tweaking of the caching interval can be done for slower systems. Default value is 1 second, should be alright for most systems.

Maximum interval between folder scans (sec):
: <input type="text" name="maximum" class="narrow" maxlength="3" value="<?=$cfg['maximum']?>" placeholder="10">

> Tweaking of the caching interval can be done for slower systems. Default value is 10 seconds, should be alright for most systems.

Run scan of each disk in a separate thread:
: <select name="mulithreaded" size="1">
  <?=mk_option($cfg['mulithreaded'], "", "Yes")?>
  <?=mk_option($cfg['mulithreaded'], "-T", "No")?>
  </select>

> Stop caching while the mover is running to avoid conflicts. When using adaptive depth it will probably work well NO. 
> With fixed depth its will almost certainly put less load on the disks to choose YES.

Include user share (/mnt/user) in scan:
: <select name="scan_user_share" size="1">
  <?=mk_option($cfg['scan_user_share'], "", "No")?>
  <?=mk_option($cfg['scan_user_share'], "-u", "Yes")?>
  </select>

> User share /mnt/user will also be scanned in addition to /mnt/disk* and /mnt/cache. This seems to increase CPU usage by a factor of x10 but is reported by numerous users to be necessary to avoid disks spinning up.

Limit the memory available to the shell in which the script runs (increase if it dies):
: <input type="text" name="ulimit" class="narrow" maxlength="6" value="<?=$cfg['ulimit']?>" placeholder="50000">

> set ulimit to NN to limit memory used by script (default=50000), '-U 0' sets no ulimit at all and inherits the shells default).

Logging:
: <select name="log" size="1">
  <?=mk_option($cfg['log'], "off", "Disabled")?>
  <?=mk_option($cfg['log'], "on", "Enabled")?>
  </select></td>

> Select whether logging is enabled or disabled. Logging will be made to /var/log/cache_dirs.log and /var/log/cache_dirs_lost_cache.csv.
> Be wary that the cache_dirs logs are placed in memory on unRAID and are not automatically rolled.

User defined options:
: <input id="pin" type="text" name="other" maxlength="200" value="<?=$cfg['other']?>" placeholder="Enter custom options here">see <u><a href="http://lime-technology.com/forum/index.php?topic=4500.0" target="_blank">unRAID forum</a></u>

<input type="submit" name="#default" value="Default">
: <input type="submit" name="#apply" value="Apply"><input type="button" value="Done" onclick="done()">

> The cache_dirs script has additional options which may be used.
> Refer to the online documentation to use these as needed,
> or see the cache_dirs script itself located under /boot/config/plugins/dynamix.cache.dirs/cache_dirs.zip

</form>
